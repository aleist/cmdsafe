// Code generated by protoc-gen-go.
// source: protobuf/data/cmdsafe.proto
// DO NOT EDIT!

/*
Package data is a generated protocol buffer package.

It is generated from these files:
	protobuf/data/cmdsafe.proto

It has these top-level messages:
	UserKey
	ScryptConfig
	CryptoEnvelope
	Command
*/
package data

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Supported key derivation algorithms.
type KeyAlgo int32

const (
	KeyAlgo_SCRYPT KeyAlgo = 0
)

var KeyAlgo_name = map[int32]string{
	0: "SCRYPT",
}
var KeyAlgo_value = map[string]int32{
	"SCRYPT": 0,
}

func (x KeyAlgo) String() string {
	return proto.EnumName(KeyAlgo_name, int32(x))
}
func (KeyAlgo) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Supported encryption algorithms.
type CipherAlgo int32

const (
	CipherAlgo_AES256CTR CipherAlgo = 0
)

var CipherAlgo_name = map[int32]string{
	0: "AES256CTR",
}
var CipherAlgo_value = map[string]int32{
	"AES256CTR": 0,
}

func (x CipherAlgo) String() string {
	return proto.EnumName(CipherAlgo_name, int32(x))
}
func (CipherAlgo) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// The password key derivation configuration.
type UserKey struct {
	Hash      []byte        `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Algorithm KeyAlgo       `protobuf:"varint,2,opt,name=algorithm,enum=cmdsafe.KeyAlgo" json:"algorithm,omitempty"`
	Scrypt    *ScryptConfig `protobuf:"bytes,3,opt,name=scrypt" json:"scrypt,omitempty"`
}

func (m *UserKey) Reset()                    { *m = UserKey{} }
func (m *UserKey) String() string            { return proto.CompactTextString(m) }
func (*UserKey) ProtoMessage()               {}
func (*UserKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UserKey) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *UserKey) GetAlgorithm() KeyAlgo {
	if m != nil {
		return m.Algorithm
	}
	return KeyAlgo_SCRYPT
}

func (m *UserKey) GetScrypt() *ScryptConfig {
	if m != nil {
		return m.Scrypt
	}
	return nil
}

type ScryptConfig struct {
	Salt []byte `protobuf:"bytes,1,opt,name=salt,proto3" json:"salt,omitempty"`
	N    int64  `protobuf:"varint,2,opt,name=n" json:"n,omitempty"`
	R    int32  `protobuf:"varint,3,opt,name=r" json:"r,omitempty"`
	P    int32  `protobuf:"varint,4,opt,name=p" json:"p,omitempty"`
}

func (m *ScryptConfig) Reset()                    { *m = ScryptConfig{} }
func (m *ScryptConfig) String() string            { return proto.CompactTextString(m) }
func (*ScryptConfig) ProtoMessage()               {}
func (*ScryptConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ScryptConfig) GetSalt() []byte {
	if m != nil {
		return m.Salt
	}
	return nil
}

func (m *ScryptConfig) GetN() int64 {
	if m != nil {
		return m.N
	}
	return 0
}

func (m *ScryptConfig) GetR() int32 {
	if m != nil {
		return m.R
	}
	return 0
}

func (m *ScryptConfig) GetP() int32 {
	if m != nil {
		return m.P
	}
	return 0
}

type CryptoEnvelope struct {
	Hmac      []byte     `protobuf:"bytes,1,opt,name=hmac,proto3" json:"hmac,omitempty"`
	Iv        []byte     `protobuf:"bytes,2,opt,name=iv,proto3" json:"iv,omitempty"`
	Key       []byte     `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Algorithm CipherAlgo `protobuf:"varint,4,opt,name=algorithm,enum=cmdsafe.CipherAlgo" json:"algorithm,omitempty"`
	UserKey   *UserKey   `protobuf:"bytes,5,opt,name=userKey" json:"userKey,omitempty"`
	Data      []byte     `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *CryptoEnvelope) Reset()                    { *m = CryptoEnvelope{} }
func (m *CryptoEnvelope) String() string            { return proto.CompactTextString(m) }
func (*CryptoEnvelope) ProtoMessage()               {}
func (*CryptoEnvelope) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CryptoEnvelope) GetHmac() []byte {
	if m != nil {
		return m.Hmac
	}
	return nil
}

func (m *CryptoEnvelope) GetIv() []byte {
	if m != nil {
		return m.Iv
	}
	return nil
}

func (m *CryptoEnvelope) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *CryptoEnvelope) GetAlgorithm() CipherAlgo {
	if m != nil {
		return m.Algorithm
	}
	return CipherAlgo_AES256CTR
}

func (m *CryptoEnvelope) GetUserKey() *UserKey {
	if m != nil {
		return m.UserKey
	}
	return nil
}

func (m *CryptoEnvelope) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Command struct {
	Name       string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Executable string   `protobuf:"bytes,2,opt,name=executable" json:"executable,omitempty"`
	Args       []string `protobuf:"bytes,3,rep,name=args" json:"args,omitempty"`
}

func (m *Command) Reset()                    { *m = Command{} }
func (m *Command) String() string            { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()               {}
func (*Command) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Command) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Command) GetExecutable() string {
	if m != nil {
		return m.Executable
	}
	return ""
}

func (m *Command) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func init() {
	proto.RegisterType((*UserKey)(nil), "cmdsafe.UserKey")
	proto.RegisterType((*ScryptConfig)(nil), "cmdsafe.ScryptConfig")
	proto.RegisterType((*CryptoEnvelope)(nil), "cmdsafe.CryptoEnvelope")
	proto.RegisterType((*Command)(nil), "cmdsafe.Command")
	proto.RegisterEnum("cmdsafe.KeyAlgo", KeyAlgo_name, KeyAlgo_value)
	proto.RegisterEnum("cmdsafe.CipherAlgo", CipherAlgo_name, CipherAlgo_value)
}

func init() { proto.RegisterFile("protobuf/data/cmdsafe.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 374 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0x92, 0x5f, 0x6b, 0xe2, 0x40,
	0x14, 0xc5, 0x1d, 0xa3, 0x09, 0xb9, 0x9b, 0x95, 0x30, 0x8b, 0x10, 0x10, 0x96, 0x90, 0x27, 0x11,
	0x56, 0x59, 0x97, 0xed, 0xbb, 0x0d, 0x3e, 0xd9, 0x87, 0x76, 0xb4, 0x0f, 0xed, 0xdb, 0x18, 0xc7,
	0x24, 0x34, 0xc9, 0x84, 0x49, 0x94, 0x06, 0xfa, 0xc5, 0xfa, 0xed, 0xca, 0x5c, 0xe3, 0x1f, 0xfa,
	0x76, 0xee, 0xcd, 0x9d, 0x93, 0xf3, 0xbb, 0x33, 0x30, 0x2a, 0x95, 0xac, 0xe5, 0xf6, 0xb0, 0x9f,
	0xed, 0x78, 0xcd, 0x67, 0x51, 0xbe, 0xab, 0xf8, 0x5e, 0x4c, 0xb1, 0x4b, 0xad, 0xb6, 0x0c, 0x3e,
	0xc0, 0x7a, 0xae, 0x84, 0x5a, 0x89, 0x86, 0x52, 0xe8, 0x25, 0xbc, 0x4a, 0x3c, 0xe2, 0x93, 0xb1,
	0xc3, 0x50, 0xd3, 0x29, 0xd8, 0x3c, 0x8b, 0xa5, 0x4a, 0xeb, 0x24, 0xf7, 0xba, 0x3e, 0x19, 0x0f,
	0xe6, 0xee, 0xf4, 0x6c, 0xb5, 0x12, 0xcd, 0x22, 0x8b, 0x25, 0xbb, 0x8e, 0xd0, 0x3f, 0x60, 0x56,
	0x91, 0x6a, 0xca, 0xda, 0x33, 0x7c, 0x32, 0xfe, 0x31, 0x1f, 0x5e, 0x86, 0xd7, 0xd8, 0x0e, 0x65,
	0xb1, 0x4f, 0x63, 0xd6, 0x0e, 0x05, 0x0f, 0xe0, 0xdc, 0xf6, 0x75, 0x84, 0x8a, 0x67, 0xf5, 0x39,
	0x82, 0xd6, 0xd4, 0x01, 0x52, 0xe0, 0xaf, 0x0d, 0x46, 0x0a, 0x5d, 0x29, 0xf4, 0xee, 0x33, 0xa2,
	0x74, 0x55, 0x7a, 0xbd, 0x53, 0x55, 0x06, 0x9f, 0x04, 0x06, 0xa1, 0x76, 0x93, 0xcb, 0xe2, 0x28,
	0x32, 0x59, 0x0a, 0x64, 0xca, 0x79, 0x74, 0x61, 0xca, 0x79, 0x44, 0x07, 0xd0, 0x4d, 0x8f, 0xe8,
	0xe8, 0xb0, 0x6e, 0x7a, 0xa4, 0x2e, 0x18, 0x6f, 0xa2, 0x41, 0x53, 0x87, 0x69, 0x49, 0xff, 0xde,
	0x52, 0xf7, 0x90, 0xfa, 0xd7, 0x05, 0x24, 0x4c, 0xcb, 0x44, 0xa8, 0xef, 0xe0, 0x13, 0xb0, 0x0e,
	0xa7, 0x3d, 0x7a, 0x7d, 0x24, 0xbf, 0xae, 0xa9, 0xdd, 0x2f, 0x3b, 0x0f, 0xe8, 0x50, 0xfa, 0x4a,
	0x3c, 0xf3, 0x14, 0x4a, 0xeb, 0xe0, 0x09, 0xac, 0x50, 0xe6, 0x39, 0x2f, 0x76, 0xfa, 0x73, 0xc1,
	0x73, 0x81, 0x99, 0x6d, 0x86, 0x9a, 0xfe, 0x06, 0x10, 0xef, 0x22, 0x3a, 0xd4, 0x7c, 0x9b, 0x09,
	0xcc, 0x6e, 0xb3, 0x9b, 0x8e, 0x3e, 0xc3, 0x55, 0x5c, 0x79, 0x86, 0x6f, 0xe8, 0x33, 0x5a, 0x4f,
	0x86, 0x60, 0xb5, 0x37, 0x44, 0x01, 0xcc, 0x75, 0xc8, 0x5e, 0x1e, 0x37, 0x6e, 0x67, 0x32, 0x02,
	0xb8, 0x22, 0xd0, 0x9f, 0x60, 0x2f, 0x96, 0xeb, 0xf9, 0xff, 0xbb, 0x70, 0xc3, 0xdc, 0xce, 0xbd,
	0xf9, 0x8a, 0x71, 0xb6, 0x26, 0x3e, 0x93, 0x7f, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4d, 0xdc,
	0x14, 0x5f, 0x45, 0x02, 0x00, 0x00,
}
